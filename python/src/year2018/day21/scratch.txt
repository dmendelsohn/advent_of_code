#ip 5
seti 123 0 1        # R1 = 123, ip=1
bani 1 456 1        # R1 = R1 & 456  (456 is 0b111001000), ip=2
eqri 1 72 1         # R1 = (R1==72)  (72 is 0b001001000), ip=3
addr 1 5 5          # ip = ip+R1+1  # Either skip instruction or don't
seti 0 0 5          # ip = 1
seti 0 0 1          # R1 = 0, ip=6
bori 1 65536 2      # R2 = R1 | 65536  (65536 is 2^16), ip=7
seti 6663054 1 1    # R1 = 6663054, ip=8
bani 2 255 4        # R4 = R2 & 255  (R4 = low byte of R2), ip=9
addr 1 4 1          # R1 = R1 + R4, ip=10
bani 1 16777215 1   # R1 = R1 & 16777215, ip=11     # low 3 bytes
muli 1 65899 1      # R1 = R1 * 65899, ip=12
bani 1 16777215 1   # R1 = R1 & 16777215, ip=13
gtir 256 2 4        # R4 = (R2 < 256), ip=14
addr 4 5 5          # ip = ip + R4 + 1  # Either skip instruction or don't
addi 5 1 5          # ip = 17  # Skip a line, to line 19
seti 27 6 5         # ip = 28  # Skip to line 30
seti 0 6 4          # R4 = 0, ip=18
addi 4 1 3          # R3 = R4+1, ip=19
muli 3 256 3        # R3 = R3*256, ip=20
gtrr 3 2 3          # R3 = (R3 > R2), ip=21
addr 3 5 5          # ip = ip+R3+1  # Either skip instruction or don't
addi 5 1 5          # ip=24,    # Skip a line, to line 26
seti 25 9 5         # ip=26,    # Skip to line 28
addi 4 1 4          # R4 = R4 + 1, ip=25
seti 17 3 5         # ip=18     # Skip to line 20
setr 4 4 2          # R2 = R4, ip=27
seti 7 2 5          # ip=8      # Skip to line 10
eqrr 1 0 4          # R4 = (R0==R1), ip = 29
addr 4 5 5          # ip = ip+R4+1  # Either skip an instruction or do not, (Skip terminates the program)
seti 5 8 5          # ip=6      # Skip to line 8

# Summaries
Lines 2-7:  Don't matter


# Narrative
Line 8 (R2=R1) sets R2 = 65536
Line 9 sets R1 = 6663054
Line 10 (R4 = R2 & 255) sets R4=0
Line 11 (R1 += R4) keeps R1 = 6663054
Line 12 (R1 mask 3 bytes) keeps R1 = 6663054  ... I think this is just to be nice to fixed with integer languages?
Line 13 (R1 *= 65899) sets R1 = 439088595546
Line 14 (R1 mask 3 bytes) sets R1 = 12075610
Line 15 (R4 = (R2 < 256)) sets R4 = 0, so we continue to Line 17 which always jumps to Line 19
Line 19 sets R4 = 0
Line 20 (R3 = R4+1) sets R3 = 1
Line 21 (R3 *= 256) sets R3 = 256
Line 22 (R3 = (R3 > R2)) sets R3 = 0, so we continue to Line 24 which always jumps to Line 26
Line 26 increments R4, R4 = 1, then we skip to Line 20
...inner loop (20,21,22,23,24,26,27) increments R4 until 256*(R4+1) exceeds R2.  (which is currently 65536)
...exiting inner loop happens when R4=256 and sends us to Line 25 which always jumps to Line 28
Line 28 (R2=R4) sets R2=256, then skip to Line 10
Line 10 (R4 = R2 & 255) sets R4=0  (just like last time)
Lines 11-14 set R1 = 10491294  (multiply and mask R1)
Line 15 (R4 = R2 < 256) sets R4 = 0 (again) so we continue to Line 17 which always jumps to Line 19
... we get back into the inner loop but it's super quick because we exit when R4=1 (first time through)
Line 28 (R2=R4) sets R2=1, then skip to Line 10
Line 10 (R4 = R2 & 255) sets R4 = 1
Lines 11-14 set R1 = 10332277
Line 15 (r4 = R2 < 256) sets R4 = 1 (different!) so we skip to Line 18, which always skips to Line 30
Line 30, assuming we don't exit, skips to Line 32 which always jumps to Line 8
Line 8 (R2=R1) sets R2 = 10332277
Line 9 sets R1 = 6663054
Line 10 (R4 = R2 & 255) sets R4 = 117


